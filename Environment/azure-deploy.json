{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "functionAppName": {
            "type": "string"
        },
        "storageAccountName": {
            "type": "string"
        },
        "applicationInsightsName": {
            "type": "string"
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_RAGRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
            ]
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "cosmosName": {
            "type": "string"
        },
        "locations": {
            "type": "array",
            "defaultValue": [
                "eastasia",
                "southeastasia",
                "centralus",
                "eastus",
                "westus",
                "northcentralus",
                "southcentralus",
                "northeurope",
                "westeurope",
                "japaneast",
                "brazilsouth",
                "australiasoutheast",
                "canadacentral",
                "uksouth",
                "southafricanorth"
            ],
            "metadata": {
                "description": "Location for all functions."
            }
        },
        "cdn_profile_name": {
            "defaultValue": "[concat('cdn-profile-', parameters('storageAccountName'))]",
            "type": "string",
            "metadata": {
                "description": "Name of the CDN profile. To use the default value, do not specify your own value."
            }
        },
        "cdn_endpoint_name": {
            "defaultValue": "[concat('cdn-endpoint-', parameters('storageAccountName'))]",
            "type": "string",
            "metadata": {
                "description": "Name of the CDN endpoint. To use the default value, do not specify your own value."
            }
        },
        "cdn_endpoint_origin": {
            "defaultValue": "[concat(parameters('storageAccountName'), 'web.core.windows.net/$web/')]",
            "type": "string",
            "metadata": {
                "description": "The static website endpoint of the storage account. This is currently incomplete and will need to be manually changed after deployment. The actual format of the endpoint should be https://<ACCOUNT_NAME>.<ZONE_NAME>.web.core.windows.net/ but there is currently no way to get the ZONE_NAME in an ARM template (see https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website)"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageAccountName')]",
            "apiVersion": "2018-02-01",
            "location": "[parameters('location')]",
            "kind": "StorageV2",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "properties": {
                "supportsHttpsTrafficOnly": false
            },
            "resources": [
                {
                    "name": "default/$web",
                    "type": "blobServices/containers",
                    "apiVersion": "2018-03-01-preview",
                    "dependsOn": [
                        "[parameters('storageAccountName')]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()])]",
            "apiVersion": "2018-07-01",
            "location": "[parameters('locations')[copyIndex()]]",
            "kind": "Storage",
            "copy": {
                "name": "storagecopy",
                "count": "[length(parameters('locations'))]"
            },
            "sku": {
                "name": "[parameters('storageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()])]",
            "location": "[parameters('locations')[copyIndex()]]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "copy": {
                "name": "serverfarmcopy",
                "count": "[length(parameters('locations'))]"
            },
            "properties": {
                "name": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()])]",
                "computeMode": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "name": "[parameters('applicationInsightsName')]",
            "apiVersion": "2018-05-01-preview",
            "location": "[parameters('location')]",
            "properties": {
                "ApplicationId": "[parameters('applicationInsightsName')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()])]",
            "location": "[parameters('locations')[copyIndex()]]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
            ],
            "kind": "functionapp",
            "copy": {
                "name": "functioncopy",
                "count": "[length(parameters('locations'))]"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]))]",
                "name": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()])]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]), ';AccountKey=', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('functionAppName'),parameters('locations')[copyIndex()]),'2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "AzureWebJobsDashboard",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]), ';AccountKey=', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('functionAppName'),parameters('locations')[copyIndex()]),'2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]), ';AccountKey=', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', parameters('functionAppName'),parameters('locations')[copyIndex()]),'2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()])]"                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2014-04-01').InstrumentationKey]"
                        },
                        {
                            "name": "AzureTableStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('cosmosName'),';AccountKey=', listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), '2019-08-01').primaryMasterKey, ';TableEndpoint=https://',parameters('cosmosName'),'.table.cosmos.azure.com:443/;')]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2018-11-01",
            "name": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex()], '/web')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', concat(parameters('functionAppName'),parameters('locations')[copyIndex()]))]"
            ],
            "copy": {
                "name": "functioncopy",
                "count": "[length(parameters('locations'))]"
            },
            "properties": {
                "cors": {
                    "allowedOrigins": [
                        "https://functions.azure.com",
                        "https://functions-staging.azure.com",
                        "https://functions-next.azure.com",
                        "[concat(parameters('functionAppName'),'fd', '.azurefd.net')]"
                    ],
                    "supportCredentials": true
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2020-06-01-preview",
            "name": "[parameters('cosmosName')]",
            "location": "UK South",
            "tags": {
                "defaultExperience": "Azure Table",
                "hidden-cosmos-mmspecial": "",
                "CosmosAccountType": "Non-Production"
            },
            "kind": "GlobalDocumentDB",
            "properties": {
                "publicNetworkAccess": "Enabled",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": true,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "enableFreeTier": true,
                "enableAnalyticalStorage": false,
                "createMode": "Default",
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "BoundedStaleness",
                    "maxIntervalInSeconds": 86400,
                    "maxStalenessPrefix": 1000000
                },
                "locations": [
                    {
                        "locationName": "UK South",
                        "failoverPriority": 0,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "UK West",
                        "failoverPriority": 1,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "Korea South",
                        "failoverPriority": 2,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "East Asia",
                        "failoverPriority": 7,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "France Central",
                        "failoverPriority": 20,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "Australia East",
                        "failoverPriority": 8,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "Korea Central",
                        "failoverPriority": 3,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "Southeast Asia",
                        "failoverPriority": 6,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "Japan East",
                        "failoverPriority": 4,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "Brazil South",
                        "failoverPriority": 13,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "West Europe",
                        "failoverPriority": 19,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "South Central US",
                        "failoverPriority": 14,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "Canada East",
                        "failoverPriority": 9,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "Japan West",
                        "failoverPriority": 5,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "East US 2",
                        "failoverPriority": 17,
                        "isZoneRedundant": true
                    },
                    {
                        "locationName": "Germany West Central",
                        "failoverPriority": 18,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "West US",
                        "failoverPriority": 15,
                        "isZoneRedundant": false
                    },
                    {
                        "locationName": "East US",
                        "failoverPriority": 10,
                        "isZoneRedundant": true
                    }
                ],
                "capabilities": [
                    {
                        "name": "EnableTable"
                    }
                ],
                "ipRules": [],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8
                    }
                }
            }
        },
        {
            "apiVersion": "2018-08-01",
            "type": "Microsoft.Network/frontDoors",
            "name": "[concat(parameters('functionAppName'),'fd')]",
            "location": "global",
            "tags": {
            },
            "properties": {
                "routingRules": [
                    {
                        "name": "routingRule1",
                        "properties": {
                            "frontendEndpoints": [
                                {
                                    "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', concat(parameters('functionAppName'),'fd'), 'frontendEndpoint1')]"
                                }
                            ],
                            "acceptedProtocols": [
                                "Http",
                                "Https"
                            ],
                            "patternsToMatch": [
                                "/*"
                            ],
                            "forwardingProtocol": "MatchRequest",
                            "backendPool": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/backendPools', concat(parameters('functionAppName'),'fd'), 'backendPool1')]"
                            },
                            "enabledState": "Enabled"
                        }
                    }
                ],
                "healthProbeSettings": [
                    {
                        "name": "healthProbeSettings1",
                        "properties": {
                            "path": "/",
                            "protocol": "Http",
                            "intervalInSeconds": 120
                        }
                    }
                ],
                "loadBalancingSettings": [
                    {
                        "name": "loadBalancingSettings1",
                        "properties": {
                            "sampleSize": 4,
                            "successfulSamplesRequired": 2
                        }
                    }
                ],
                "backendPools": [
                    {
                        "name": "backendPool1",
                        "properties": {
                            "copy": [
                                {
                                    "name": "backends",
                                    "count": "[length(parameters('locations'))]",
                                    "input": {
                                        "address": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex('backends')],'.azurewebsites.net')]",
                                        "backendHostHeader": "[concat(parameters('functionAppName'),parameters('locations')[copyIndex('backends')],'.azurewebsites.net')]",
                                        "httpPort": 80,
                                        "httpsPort": 443,
                                        "weight": 50,
                                        "priority": 1,
                                        "enabledState": "Enabled"
                                    }
                                }
                            ],
                            "loadBalancingSettings": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', concat(parameters('functionAppName'),'fd'), 'loadBalancingSettings1')]"
                            },
                            "healthProbeSettings": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', concat(parameters('functionAppName'),'fd'), 'healthProbeSettings1')]"
                            }
                        }
                    }

                ],
                "frontendEndpoints": [
                    {
                        "name": "frontendEndpoint1",
                        "properties": {
                            "hostName": "[concat(parameters('functionAppName'),'fd', '.azurefd.net')]",
                            "sessionAffinityEnabledState": "Disabled"
                        }
                    }
                ],
                "enabledState": "Enabled"
            }
        },
        {
            "type": "Microsoft.Cdn/profiles",
            "sku": {
                "name": "Standard_Microsoft"
            },
            "name": "[parameters('cdn_profile_name')]",
            "apiVersion": "2016-04-02",
            "location": "global",
            "tags": {},
            "scale": null,
            "properties": {
                "resourceState": "Active"
            },
            "dependsOn": []
        },
        {
            
            "type": "Microsoft.Cdn/profiles/endpoints",
            "name": "[concat(parameters('cdn_profile_name'), '/', parameters('cdn_endpoint_name'))]",
            "apiVersion": "2016-04-02",
            "location": "global",
            "tags": {},
            "scale": null,
            "properties": {
                "originHostHeader": "[parameters('cdn_endpoint_origin')]",
                "isHttpAllowed": true,
                "isHttpsAllowed": true,
                "queryStringCachingBehavior": "NotSet",
                "originPath": null,
                "origins": [
                    {
                        "name": "[concat(parameters('cdn_endpoint_name'), '-origin-', uniqueString(resourceGroup().id))]",
                        "properties": {
                            "hostName": "[parameters('cdn_endpoint_origin')]",
                            "httpPort": 80,
                            "httpsPort": 443
                        }
                    }
                ],
                "contentTypesToCompress": [],
                "isCompressionEnabled": false
            },
            "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', parameters('cdn_profile_name'))]"
            ]
        }
    ],
    "outputs": {
    }
}
